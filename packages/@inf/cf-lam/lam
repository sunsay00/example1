#!/usr/bin/env node
// @ts-check

const colors = require('colors/safe');
const path = require('path');
const fs = require('fs');
const { maketools } = require('@inf/core');

const error = str => console.error(colors.red(`[SS] ${str}`));

const printusage = () => {
  console.log(`usage: ${path.basename(process.argv[1])} <function-name> ...`);
  console.log('    FUNCTION-NAME');
  const tmpdir = `${__dirname}/tmp`;
  if (fs.existsSync(tmpdir) && fs.statSync(tmpdir).isDirectory()) {
    fs.readdirSync(tmpdir).forEach(f => {
      console.log(`    - ${f}`);
    });
  }
};

if (process.argv.length < 3) {
  printusage();
  process.exit(0);
}

const main = async (fnname, args) => {
  const makefilepath = `${__dirname}/tmp/${fnname}/Makefile`;
  if (!fs.existsSync(makefilepath)) {
    error('invalid makefile');
    process.exit(1);
  }
  const cmds = maketools.readRules(makefilepath);
  if (args.length > 0) {
    const [cmd, ...subargs] = args;
    if (cmds.find(c => c.name == cmd)) {
      await maketools.invokeRule(makefilepath, cmd, subargs);
    } else {
      maketools.printRules(cmds);
    }
  } else {
    maketools.printRules(cmds);
  }
};

const [_1, _2, fnname, ...args] = process.argv;
main(fnname, args).catch(console.error);