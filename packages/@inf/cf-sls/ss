#!/usr/bin/env node
// @ts-check

const colors = require('colors/safe');
const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

const error = str => console.error(colors.red(`[SS] ${str}`));

const printusage = () => {
  console.log(`usage: ${path.basename(process.argv[1])} <function-name> ...`);
  console.log('    FUNCTION-NAME');
  const tmpdir = `${__dirname}/tmp`;
  if (fs.existsSync(tmpdir) && fs.statSync(tmpdir).isDirectory()) {
    fs.readdirSync(tmpdir).filter(f => f.startsWith('cf-sls-') && f.substr(7)).forEach(f => {
      console.log(`    - ${f.substr(7)}`);
    });
  }
};

if (process.argv.length < 3) {
  printusage();
  process.exit(0);
}

const makefileReadRules = makefilepath => {
  const data = fs.readFileSync(makefilepath, { encoding: 'utf8' });
  //const re = /^(?:# DESC: (.+)?[\w\W])?([a-zA-Z0-9][a-zA-Z0-9\.]*):/gm;
  const re = /^(?:# DESC: (.+)?[\w\W])([a-zA-Z0-9][a-zA-Z0-9\.]*):/gm;
  let m = re.exec(data);
  const rules = [];
  while (m) {
    if (m[1] && m[2]) {
      rules.push({ name: m[2], desc: m[1] });
    } else if (m[2]) {
      rules.push({ name: m[2] });
    }
    m = re.exec(data);
  }
  return rules;
}

const makefileInvokeRule = (makefilepath, rule, args) => new Promise((resolve, reject) => {
  const proc = spawn('make', [rule], {
    shell: true,
    cwd: path.dirname(makefilepath),
    env: {
      ...process.env,
      SLS_SS_ARGS: `"${args.map(s => s.replace(/'/g, '\'')).join(' ')}"`,
      FORCE_COLOR: 'true'
    }
  });
  proc.stdout.on('data', data => process.stdout.write(data.toString()));
  proc.stderr.on('data', data => process.stderr.write(data.toString()));
  proc.on('close', code => {
    if (code == 0) resolve();
    else reject(new Error(`failed to invoke make rule '${rule}'`));
  });
  proc.stdin.end();
})

const makefilePrintRules = (fnname, rules) => {
  console.log(`usage: ${path.basename(process.argv[1])} ${fnname} <command> ...`);
  console.log('    COMMAND                             DESCRIPTION');
  rules.forEach(cmd => console.log(`    - ${cmd.name.substr(0, 30).padEnd(30, ' ')}    ${cmd.desc || ''}`));
}

const main = async (fnname, args) => {
  const makefilepath = `${__dirname}/tmp/cf-sls-${fnname}/Makefile`;
  if (!fs.existsSync(makefilepath)) {
    error('invalid makefile');
    process.exit(1);
  }
  const cmds = makefileReadRules(makefilepath);
  if (args.length > 0) {
    const [cmd, ...subargs] = args;
    if (cmds.find(c => c.name == cmd)) {
      await makefileInvokeRule(makefilepath, cmd, subargs);
    } else {
      makefilePrintRules(fnname, cmds);
    }
  } else {
    makefilePrintRules(fnname, cmds);
  }
};

const [_1, _2, fnname, ...args] = process.argv;
main(fnname, args).catch(console.error);