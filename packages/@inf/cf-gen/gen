#!/bin/bash

set -e

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

if [ -L $DIR/gen ]; then
  GENDIR=`dirname $DIR/$(readlink $DIR/gen)`
else
  GENDIR="$DIR"
fi

function printusage {
  echo "usage: gen <command>"
  echo "  commands:"
  #echo "    - generate                    # generates ORM code"
  #echo "    - seed <db-url> <service-id>  # seeds the database"
  echo "    - wipetest                    # wipes out test database"
  echo "    - up                          # transitions the database to the lastest migration"
  echo "    - down                        # transitions the database to its previous migration"
  echo "    - shell                       # connects to db"
}

if [[ -z ${1} ]]; then
  printusage
  exit 0
fi

CMD="$1"

if [[ $CMD == "generate" ]]; then

  if [ ! -f $GENDIR/../../../ledger.scm ]; then
    echo "ledger.scm file not found";
    exit 1
  fi

  cd $GENDIR/generator/ && LEDGER_PATH=$GENDIR/../../../ledger.scm make configure

elif [[ $CMD == "seed" ]]; then

  if [[ -z "${2}" ]] || [[ -z "${3}" ]]; then
    echo "invalid arguments to 'seed subcommand"
    printusage
    exit 1
  fi

  DB_URL="${2}"
  SERVICE_ID="${3}"

  if [[ ${STAGE} == "dev" ]]; then
    TUNNEL="${GENDIR}/tunnel ${LOCAL_PORT} ${RDS_HOST} 5432 ${PROXY_HOST}"
  else
    TUNNEL=""
  fi

  ${TUNNEL} yarn -s vars ${DIR}/seed ${DB_URL} ${SERVICE_ID}
  ${TUNNEL} DB=`yarn -s vars echo ${DB_URL}` yarn -s db-migrate up --migrations-dir ${GENDIR}/infra/postgres/migrations --config ${GENDIR}/database.json

elif [[ $CMD == "wipetest" ]]; then

  if [ ! -f "$GENDIR/_vars.env" ]; then
    echo "invalid _vars.env file - (looked in ${GENDIR})";
  fi
  source ${GENDIR}/_vars.env
  if [[ -z "$DB_TEST_URL" ]] || [[ -z "$DB_URL" ]]; then
    echo "undefined db urls"
  fi

  STAGE=`yarn -s vars echo {{STAGE}}`
  if [[ ${STAGE} == "dev" ]]; then
    TUNNEL="${GENDIR}/tunnel ${LOCAL_PORT} ${RDS_HOST} 5432 ${PROXY_HOST}"
  else
    TUNNEL=""
  fi

  ${TUNNEL} STAGE=${STAGE} DB_URL=${DB_URL} DB_TEST_URL=${DB_TEST_URL} GENDIR=${GENDIR} ${GENDIR}/wipetest

elif [[ $CMD == "up" ]]; then

  if [ ! -f "$GENDIR/_vars.env" ]; then
    echo "invalid _vars.env file - (looked in ${GENDIR})";
  fi
  source ${GENDIR}/_vars.env
  if [[ -z "$DB_URL" ]]; then
    echo "undefined db url"
  fi
  
  STAGE=`yarn -s vars echo {{STAGE}}`
  if [[ ${STAGE} == "dev" ]]; then
    TUNNEL="${GENDIR}/tunnel ${LOCAL_PORT} ${RDS_HOST} 5432 ${PROXY_HOST}"
  else
    TUNNEL=""
  fi

  ${TUNNEL} DB=`yarn -s vars echo ${DB_URL}` yarn -s db-migrate up --migrations-dir ${GENDIR}/infra/postgres/migrations --config ${GENDIR}/database.json

elif [[ $CMD == "down" ]]; then

  if [ ! -f "$GENDIR/_vars.env" ]; then
    echo "invalid _vars.env file - (looked in ${GENDIR})";
  fi
  source ${GENDIR}/_vars.env
  if [[ -z "$DB_URL" ]]; then
    echo "undefined db url"
  fi
  
  STAGE=`yarn -s vars echo {{STAGE}}`
  if [[ ${STAGE} == "dev" ]]; then
    TUNNEL="${GENDIR}/tunnel ${LOCAL_PORT} ${RDS_HOST} 5432 ${PROXY_HOST}"
  else
    TUNNEL=""
  fi

  ${TUNNEL} DB=`yarn -s vars echo ${DB_URL}` yarn -s db-migrate down --migrations-dir ${GENDIR}/infra/postgres/migrations --config ${GENDIR}/database.json

elif [[ $CMD == "shell" ]]; then

  if [ ! -f "$GENDIR/_vars.env" ]; then
    echo "invalid _vars.env file - (looked in ${GENDIR})";
  fi
  source ${GENDIR}/_vars.env
  if [[ -z "$DB_URL" ]]; then
    echo "undefined db test url"
  fi

  STAGE=`yarn -s vars echo {{STAGE}}`
  if [[ ${STAGE} == "dev" ]]; then
    TUNNEL="${GENDIR}/tunnel ${LOCAL_PORT} ${RDS_HOST} 5432 ${PROXY_HOST}"
  else
    TUNNEL=""
  fi
  ${TUNNEL} yarn -s vars pgcli "$DB_URL"

else
  echo "unknown command: ${CMD}"
  printusage
  exit 1
fi