(module migrations (migrations-generate-up migrations-generate-down migrations-generate-js expand-type)
  (import scheme chicken utils data-structures tools signatures migrationactions matchable)
  (require-extension srfi-13 srfi-1)
 
  (define (make-empty-specs) (list 'spec))

  (define (value->jsvalue value)
    (cond 
      ((boolean? value) (if value "true" "false"))
      (else value)))

  (define (value->pgvalue value)
    (cond
      ((boolean? value) (if value "TRUE" "FALSE"))
      ((number? value) value)
      ((null? value) "NULL")
      (else (error (apply string-append (list "unknown pg value " (->string value)))))))

  (define (type->sqltype type spec) 
    (let ((auto-increment? (specs->assq 'auto-increment spec)))
      (if auto-increment? 
        ""
        (cond
          ((eq? 'String type)
           (if (specs->assq 'force-numeric spec)
             "BIGINT"
             (list (string-append "TEXT"))))
          ((eq? 'Float type) "REAL")
          ((eq? 'DateTime type) "TIMESTAMP WITH TIME ZONE")
          ((eq? 'Int type) "BIGINT")
          ((eq? 'Boolean type) "BOOLEAN")
          ((eq? 'Point type) "GEOMETRY(Point, 4326)")
          (else 'JSONB)))))

  (define (sqlcolspecs-emit specs)
    (list
      (let ((auto-increment? (specs->assq 'auto-increment specs)))
        (if auto-increment? "SERIAL" ""))
      (let ((primary-key? (specs->assq 'primary-key specs)))
        (if primary-key? "PRIMARY KEY" ""))
      (let ((unique? (specs->assq 'unique specs)))
        (if unique? "UNIQUE" ""))))

  (define (expand-type type specs)
    (intersperse
      (cond
        ((array? type)
         (list (match (base-type type)
                      ('String "TEXT[]")
                      (? "JSONB[]"))))
        ((optional? type) (list (type->sqltype (optional->type type) specs)))
        (else (list (type->sqltype type specs))))
      " "))

  (define (specs->columnspecs type specs) 
    (intersperse 
      (filter 
        (lambda (x) (or (not (string? x)) (not (string=? x ""))))
        (flatten (cons (expand-type type specs)
                       (sqlcolspecs-emit specs)))) " "))

  (define (param->type-specs param)
    (let ((specs (param->specs param)))
      (let ((type (param->type param))
            (primary-key? (specs->assq 'primary-key specs)))
        (list (if (null? specs)
                (expand-type type (make-empty-specs))
                (specs->columnspecs type specs))
              (if (or primary-key? ; primary keys are automatically generated by stored procedure
                      (optional? type)) "" " NOT NULL")))))

  (define (default-emit param)
    (let ((specs (param->specs param)))
      (let ((def (specs->find 'default specs)))
        (if (pair? def) (list "DEFAULT " (value->pgvalue (cadr def))) ""))))

  (define (migrations-generate-up entire-api full-api api i) 
    (let*
      ((ind 1)
       (expr 
         (let ((models (remove (lambda (m) (model-disabled? m 'migrations)) (api->models api)))
               (indices (api->indices api))
               (d-indices (api->index-destroys api))
               (type-exts (api->type-extensions api)))
           (list
             "/* this file has been automatically generated, do not modify */"
             "\n"
             (if (not (zero? i)) ""
               (list
                 "\n" ((do-action 'gen-id-fn))
                 "\n" ((do-action 'user))))
             "\n"
             (map (lambda (model) 
                    (if (not (model-assq-typedef? model)) ""
                        (list
                          "\n\nCREATE TABLE " (model->name model) " ("
                          (let ((typedef (model->typedef model)))
                            (intersperse 
                              (map (lambda (param) 
                                     (list "\n  " 
                                           "\"" (lower (param->name param)) "\" " 
                                           (param->type-specs param)))
                                   (typedef->params+foreign entire-api api typedef))
                              ","))
                          "\n);"
                          "\nALTER TABLE " (model->name model) " ALTER COLUMN id SET DEFAULT generate_id();"))) models)
             (map (lambda (index)
                    (map (lambda (setting)
                           (list
                             "\nCREATE " (if (index-unique? index) "UNIQUE " "")
                             "INDEX " (first-down (index->typename index))  "_" (intersperse setting "_")
                             " ON " (typename->modelname full-api (index->typename index)) " (" (intersperse setting ", ") ");"))
                         (index->settings index))) indices)
             "\n"
             (if (null? d-indices) (list)
               (list (map (lambda (d-index)
                            (match d-index
                                   (`(index-destroy ,model ,cols ,opts) (list "\nDROP INDEX " (first-down model) "_" (intersperse cols "_") ";"))
                                   (x (error "index destroy - no match " (->string x)))))
                          d-indices)
                     "\n"))
             (map (lambda (ext)
                    (let ((param (type-extension->param ext)))
                      (list "\nALTER TABLE " (typename->modelname full-api (type-extension->typename ext)) " ADD COLUMN \"" (param->name param) "\" " (param->type-specs param) " " (default-emit param) ";")))
                  type-exts)
             ))))
      (smoosh expr)))

  (define (migrations-generate-down full-api api i) 
    (let*
      ((ind 1)
       (expr 
         (let ((models (remove (lambda (m) (model-disabled? m 'migrations)) (api->models api)))
               (indices (api->indices api))
               (d-indices (api->index-destroys api))
               (type-exts (api->type-extensions api)))
           (list
             "/* this file has been automatically generated, do not modify */"
             (map (lambda (ext)
                    (let ((param (type-extension->param ext)))
                      (list "\nALTER TABLE " (typename->modelname full-api (type-extension->typename ext)) " DROP COLUMN \"" (param->name param) "\";")))
                  type-exts)
             "\n"
             (map (lambda (index)
                    (map (lambda (setting) 
                           (list "\nDROP INDEX " (first-down (index->typename index))  "_" (intersperse setting "_") ";"))
                         (index->settings index))) indices)
             "\n"
             (if (null? d-indices) (list)
               (list (map (lambda (index)
                            (map (lambda (setting)
                                   (list
                                     "\nCREATE " (if (index-unique? index) "UNIQUE " "")
                                     "INDEX " (first-down (index->typename index))  "_" (intersperse setting "_")
                                     " ON " (typename->modelname full-api (index->typename index)) " (" (intersperse setting ", ") ");"))
                                 (index->settings index))) d-indices)
                     "\n"))
             (map (lambda (model) 
                    (if (not (model-assq-typedef? model)) ""
                      (list
                        "\n\nDROP TABLE " (model->name model) ";"))) models)
             (if (not (zero? i)) ""
               (list 
                 "\n" ((undo-action 'user))
                 "\n" ((undo-action 'gen-id-fn))))))))
      (smoosh expr)))

  (define (migrations-generate-js timestamp name)
    (let* ((z (number->string (inexact->exact (floor (version-name->number name)))))
           (expr 
             (list
               "'use strict';"
               "\n// this file has been automatically generated, do not modify"
               "\n"
               "\nvar dbm;"
               "\nvar type;"
               "\nvar seed;"
               "\nvar fs = require('fs');"
               "\nvar path = require('path');"
               "\nvar Promise;"
               "\n"
               "\n/**"
               "\n  * We receive the dbmigrate dependency from dbmigrate initially."
               "\n  * This enables us to not have to rely on NODE_PATH."
               "\n  */"
               "\nexports.setup = function(options, seedLink) {"
               "\n  dbm = options.dbmigrate;"
               "\n  type = dbm.dataType;"
               "\n  seed = seedLink;"
               "\n  Promise = options.Promise;"
               "\n};"
               "\n"
               "\nexports.up = function(db) {"
               "\n  var filePath = path.join(__dirname, 'sqls', '" timestamp "-v" z "-up.sql');"
               "\n  return new Promise( function( resolve, reject ) {"
               "\n    fs.readFile(filePath, {encoding: 'utf-8'}, function(err,data){"
               "\n      if (err) return reject(err);"
               "\n"
               "\n      resolve(data);"
               "\n    });"
               "\n  })"
               "\n  .then(function(data) {"
               "\n    return db.runSql(data);"
               "\n  });"
               "\n};"
               "\n"
               "\nexports.down = function(db) {"
               "\n  var filePath = path.join(__dirname, 'sqls', '" timestamp "-v" z "-down.sql');"
               "\n  return new Promise( function( resolve, reject ) {"
               "\n    fs.readFile(filePath, {encoding: 'utf-8'}, function(err,data){"
               "\n      if (err) return reject(err);"
               "\n"
               "\n      resolve(data);"
               "\n    });"
               "\n  })"
               "\n  .then(function(data) {"
               "\n    return db.runSql(data);"
               "\n  });"
               "\n};"
               "\n"
               "\nexports._meta = {"
               "\n  'version': 1"
               "\n};")))
      (smoosh expr)))
  )

