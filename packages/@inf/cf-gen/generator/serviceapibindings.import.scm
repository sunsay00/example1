(module serviceapibindings (serviceapibindings-generate)
  (import scheme chicken data-structures tools signatures typedefs gqlqueries signatures)
  (require-extension srfi-13 srfi-1)

  (define (methoddisabled? m) (method-disabled? m 'apollobindings))

  (define (query-emit ind model method)
    (let ((name (method->name method))
          (params (graphql-params model method)))
      (list
        "\nexport const " (serviceapi-sig-emit model method) " => {"
        "\n  const query = gql`"
        (gql-query-emit model method) "`;"
        "\n  const data = await Root.request<{ " (model->name model) (first-up (method->name method)) ": any }>(query, { " (intersperse (map param->name (method->params method)) ", ") " });"
        "\n  return data." (model->name model) (first-up (method->name method)) ";"
        "\n};")))

  (define (mutation-emit ind model method)
    (let ((name (method->name method))
          (params (graphql-params model method)))
      (list
        "\nexport const " (serviceapi-sig-emit model method) " => {"
        "\n  const query = gql`"
        (gql-mutation-emit model method) "`;"
        "\n  const data = await Root.request<{ " (model->name model) (first-up (method->name method)) ": any }>(query, { " (intersperse (map param->name (method->params method)) ", ") " });"
        "\n  return data." (model->name model) (first-up (method->name method)) ";"
        "\n};")))

  (define (serviceapibindings-generate model-name api)
    (let* ((ind 1)
           (model (models-assq model-name api))
           (model-name (model->name model))
           (queries (remove methoddisabled? (filter get? (model->methods model))))
           (mutations (remove methoddisabled? (filter set? (model->methods model))))
           (methods (remove methoddisabled? (model->methods model))))
      (let ((expr (list
                    "// this file has been automatically generated by serviceapibindings, do not modify"
                    "\n"
                    "\nimport Root from '../../root';"
                    "\nimport gql from 'graphql-tag';"
                    "\n"
                    (map (lambda (method) (query-emit ind model method)) queries)
                    "\n"
                    (map (lambda (method) (mutation-emit ind model method)) mutations)
                    )))
        (smoosh expr))))
  )

