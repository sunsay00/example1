(module schemas (generate-schemas schema->version schema->version-number schema->prev-api schema->api schema->delta-api)
  (import scheme chicken data-structures extras tools signatures matchable)
  (require-extension srfi-13 srfi-1)

  (define (make-apiname n) (string->symbol (string-append "?API_" (symbol->string n))))
  (define (apiname? an) (eq? (string-contains (symbol->string an) "?API_") 0))
  (define (apiname->name an) (string->symbol (substring (symbol->string an) 5)))

  (define make-version cons)
  (define version->exprs cdr)
  (define version->name car)

  (define (group xs)
    (map (lambda (p)
           (cons (car p)
                 (map (lambda (p)
                        (cons (car p) (group-by car cdr (cadr p))))
                      (group-by car cdr (cadr p)))))
         (group-by car cdr xs)))

  (define (tf-param param)
    (match param
           ((n t d) `(,n ,t ,d))
           ((n t) `(,n ,t))
           (_ (error "param match failed for " param))))

  (define (inject-method-versions merge-sub-versions? ledger)
    (if merge-sub-versions?
      (let ((ret (map (lambda (v)
             (let ((version-name (version-name-floor (version->name v))))
               (make-version
                 version-name
                 (map (lambda (expr) 
                        (cons (version-name->number version-name) expr))
                      (version->exprs v)))))
           ledger)))
        (map (lambda (i) (cons (car i) (apply append (cadr i)))) (group-by car cdr ret)))
      (map (lambda (v)
             (make-version
               (version->name v)
               (map (lambda (expr) 
                      (cons (version-name->number (version->name v)) expr))
                    (version->exprs v))))
           ledger)))

  (define (tf-expr expr)
    (match expr
           ; scalar
           ((v 'create-scalar m)
            `((,m SCALAR CREATE CTOR)))

           ; index
           ((v 'create-index m cols)
            `((,(string->symbol (string-append (symbol->string m) "_Index"))
                INDEX CREATE CTOR DEFAULT ,m ,cols)))
           ((v 'create-unique-index m cols)
            `((,(string->symbol (string-append (symbol->string m) "_Index"))
                INDEX CREATE CTOR UNIQUE ,m ,cols)))
           ((v 'destroy-index m cols)
            `((,(string->symbol (string-append (symbol->string m) "_Index"))
                INDEX CREATE CTOR DESTROY-DEFAULT ,m ,cols)))
           ((v 'destroy-unique-index m cols)
            `((,(string->symbol (string-append (symbol->string m) "_Index"))
                INDEX CREATE CTOR DESTROY-UNIQUE ,m ,cols)))

           ; type
           ((v 'create-type m)
            `((,m TYPE CREATE CTOR)))

           ; field
           ((v 'type-add-field m n t . c)
            `((,m TYPE CREATE ADDFIELD BASIC ,n ,t ,c)))
           ((v 'type-add-readonly-field m n t . c)
            `((,m TYPE CREATE ADDFIELD READONLY ,n ,t ,c)))
           ((v 'type-add-hidden-field m n t . c)
            `((,m TYPE CREATE ADDFIELD HIDDEN ,n ,t ,c)))

           ; copied field
           ((v 'type-add-copied-field m (n t) (key fkey fmodel selector))
            `((,m TYPE CREATE ADDFIELD COPY ,n ,t ,key ,fkey ,fmodel ,selector)))

           ; service
           ((v 'create-service m p)
            `((,m MODEL CREATE CTOR SERVICE ,p)))

           ; model
           ((v 'create-model m p)
            `((,m TYPE CREATE CTOR)
              (,m MODEL CREATE CTOR ,p)))
           ((v 'create-proxy-model m p)
            `((,m TYPE CREATE CTOR)
              (,m MODEL CREATE CTOR PROXY ,p)))
           ((v 'create-user-model m p)
            `((,m TYPE CREATE CTOR)
              (,m MODEL CREATE CTOR USER ,p)))

           ; model field
           ((v 'model-add-unique-field m n t . c)
            `((,m TYPE CREATE ADDFIELD UNIQUE ,n ,t ,c)))
           ((v 'model-add-field m n t . c)
            `((,m TYPE CREATE ADDFIELD CONST ,n ,t ,c)))
           ((v 'model-add-custom-field m n t . c)
            `((,m TYPE CREATE ADDFIELD CUSTOM ,n ,t ,c)))
           ((v 'model-add-readonly-field m n t . c)
            `((,m TYPE CREATE ADDFIELD READONLY ,n ,t ,c)))
           ((v 'model-add-hidden-field m n t . c)
            `((,m TYPE CREATE ADDFIELD HIDDEN ,n ,t ,c)))

           ; foreign field
           ((v 'model-add-foreign-field m n (t fkey selector) d)
            `((,m TYPE CREATE ADDFOREIGNFIELD CONST ,n ,t ,d ,(symbol-append n (first-up fkey)) ,fkey ,selector)))
           ((v 'model-add-foreign-field m n (t fkey selector))
            `((,m TYPE CREATE ADDFOREIGNFIELD CONST ,n ,t null ,(symbol-append n (first-up fkey)) ,fkey ,selector)))
           ((v 'model-add-foreign-field m n (t fkey selector key)) ; for key override
            `((,m TYPE CREATE ADDFOREIGNFIELD CONST ,n ,t null ,key ,fkey ,selector)))

           ; service method
           ((v 'service-add-api-get-method m a n r p)
            `((,m MODEL CREATE ADDMETHOD GET ,v ,n ,a ,r ,(map tf-param p) (config) SERVICEAPIONLY)))
           ((v 'service-add-api-set-method m a n r p)
            `((,m MODEL CREATE ADDMETHOD SET ,v ,n ,a ,r ,(map tf-param p) (config) SERVICEAPIONLY)))
           ((v 'service-add-api-get-method m a n r p c)
            `((,m MODEL CREATE ADDMETHOD GET ,v ,n ,a ,r ,(map tf-param p) ,c SERVICEAPIONLY)))
           ((v 'service-add-api-set-method m a n r p c)
            `((,m MODEL CREATE ADDMETHOD SET ,v ,n ,a ,r ,(map tf-param p) ,c SERVICEAPIONLY)))

           ((v 'service-add-get-method m a n r p)
            `((,m MODEL CREATE ADDMETHOD GET ,v ,n ,a ,r ,(map tf-param p) (config) SERVICEONLY)))
           ((v 'service-add-set-method m a n r p)
            `((,m MODEL CREATE ADDMETHOD SET ,v ,n ,a ,r ,(map tf-param p) (config) SERVICEONLY)))
           ((v 'service-add-get-method m a n r p c)
            `((,m MODEL CREATE ADDMETHOD GET ,v ,n ,a ,r ,(map tf-param p) ,c SERVICEONLY)))
           ((v 'service-add-set-method m a n r p c)
            `((,m MODEL CREATE ADDMETHOD SET ,v ,n ,a ,r ,(map tf-param p) ,c SERVICEONLY)))

           ; db method
           ((v 'model-add-db-get-method m n r p)
            `((,m MODEL CREATE ADDMETHOD GET ,v ,n #f ,r ,(map tf-param p) (config) DBONLY)))
           ((v 'model-add-db-set-method m n r p)
            `((,m MODEL CREATE ADDMETHOD SET ,v ,n #f ,r ,(map tf-param p) (config) DBONLY)))
           ((v 'model-add-db-get-method m n r p c)
            `((,m MODEL CREATE ADDMETHOD GET ,v ,n #f ,r ,(map tf-param p) ,c DBONLY)))
           ((v 'model-add-db-set-method m n r p c)
            `((,m MODEL CREATE ADDMETHOD SET ,v ,n #f ,r ,(map tf-param p) ,c DBONLY)))

           ; api method
           ((v 'model-add-api-get-method m a n r p)
            `((,m MODEL CREATE ADDMETHOD GET ,v ,(make-apiname n) ,a ,r ,(map tf-param p) (config) APIONLY)))
           ((v 'model-add-api-get-method m a n r p c)
            `((,m MODEL CREATE ADDMETHOD GET ,v ,(make-apiname n) ,a ,r ,(map tf-param p) ,c APIONLY)))
           ((v 'model-add-api-set-method m a n r p)
            `((,m MODEL CREATE ADDMETHOD SET ,v ,(make-apiname n) ,a ,r ,(map tf-param p) (config) APIONLY)))
           ((v 'model-add-api-set-method m a n r p c)
            `((,m MODEL CREATE ADDMETHOD SET ,v ,(make-apiname n) ,a ,r ,(map tf-param p) ,c APIONLY)))

           ((v 'model-add-set-method m a n r p)
            `((,m MODEL CREATE ADDMETHOD SET ,v ,(make-apiname n) ,a ,r ,(map tf-param p) (config) APIONLY)
              (,m MODEL CREATE ADDMETHOD SET ,v ,n #f ,r ,(map tf-param p) (config) DBONLY)))
           ((v 'model-add-set-method m a n r p c)
            `((,m MODEL CREATE ADDMETHOD SET ,v ,(make-apiname n) ,a ,r ,(map tf-param p) ,c APIONLY)
              (,m MODEL CREATE ADDMETHOD SET ,v ,n #f ,r ,(map tf-param p) ,c DBONLY)))

           ((v 'model-add-get-method m a n r p)
            `((,m MODEL CREATE ADDMETHOD GET ,v ,(make-apiname n) ,a ,r ,(map tf-param p) (config) APIONLY)
              (,m MODEL CREATE ADDMETHOD GET ,v ,n #f ,r ,(map tf-param p) (config) DBONLY)))
           ((v 'model-add-get-method m a n r p c)
            `((,m MODEL CREATE ADDMETHOD GET ,v ,(make-apiname n) ,a ,r ,(map tf-param p) ,c APIONLY)
              (,m MODEL CREATE ADDMETHOD GET ,v ,n #f ,r ,(map tf-param p) ,c DBONLY)))

           ; custom method
           ((v 'model-add-set-custom-method m a n r p)
            `((,m MODEL CREATE ADDMETHOD SET ,v ,(make-apiname n) ,a ,r ,(map tf-param p) (config) CUSTOMONLY)))
           ((v 'model-add-set-custom-method m a n r p c)
            `((,m MODEL CREATE ADDMETHOD SET ,v ,(make-apiname n) ,a ,r ,(map tf-param p) ,c CUSTOMONLY)))
           ((v 'model-add-get-custom-method m a n r p)
            `((,m MODEL CREATE ADDMETHOD GET ,v ,(make-apiname n) ,a ,r ,(map tf-param p) (config) CUSTOMONLY)))
           ((v 'model-add-get-custom-method m a n r p c)
            `((,m MODEL CREATE ADDMETHOD GET ,v ,(make-apiname n) ,a ,r ,(map tf-param p) ,c CUSTOMONLY)))

           (_ (error "(schema.import) expr match failed for" expr))))

  ; ----------------------------------------------------------------------------------------------------------------------------

  (define (emit-type-field field)
    (match field
           (('ADDFIELD 'COPY n t key fkey fmodel selector)
            `(,n ,t (spec (metadata ((copied-field ,key ,fkey ,fmodel ,selector))))))
           (('ADDFIELD 'READONLY n t c)
            `(,n ,t (spec (readonly #t) . ,c)))
           (('ADDFIELD 'HIDDEN n t c)
            `(,n ,t (spec (hidden #t) . ,c)))
           (('ADDFIELD 'BASIC n t c)
            `(,n ,t (spec . ,c)))
           (('ADDFIELD 'CONST n t c)
            `(,n ,t (spec . ,c)))
           (_ (error "emit-type-field failed for" field))))

  (define (emit-model-field m field)
    (match field
           (('ADDFIELD 'UNIQUE n t c)
            `((,n ,t (spec (unique #t) . ,c))))
           (('ADDFIELD 'CONST n t c)
            `((,n ,t (spec . ,c))))
           (('ADDFIELD 'READONLY n t c)
            `((,n ,t (spec (readonly #t) . ,c))))
           (('ADDFIELD 'HIDDEN n t c)
            `((,n ,t (spec (hidden #t) . ,c))))
           (('ADDFIELD 'CUSTOM n t c)
            `((,n ,t (spec . ,c))))
           (('ADDFOREIGNFIELD 'CONST n t d key fkey selector)
            `((,n ,(if (optional? t) t (make-optional t))
                  (spec (disable (migrations rdsstore))
                        (metadata ((foreign-field ,key ,fkey ,n ,t ,selector)))
                        ,(if (null? d) '() `(default ,d))))))
           (('CTOR)
            (error (string-append "create-model " (->string m) " has already beed declared")))
           (_ (error "emit-model-field failed for" field))))

  (define (emit-param param)
    (match param
           ((n t d) `(,n ,t (spec (default ,d))))
           ((n t) `(,n ,t))
           (_ (error "param match failed for " param))))

  (define (emit-method method)
    (match method
           (('ADDMETHOD 'GET v n a r p ('config . c) 'SERVICEONLY)
            `(get ,v (,n "" ,r) (opts (params . ,(map emit-param p))
                                      (access ,a)
                                      (config . ,c)
                                      (disable ()))))
           (('ADDMETHOD 'SET v n a r p ('config . c) 'SERVICEONLY)
            `(set ,v (,n "" ,r) (opts (params . ,(map emit-param p))
                                      (access ,a)
                                      (config . ,c)
                                      (disable ()))))
           (('ADDMETHOD 'GET v n a r p ('config . c) 'SERVICEAPIONLY)
            `(get ,v (,n "" ,r) (opts (params . ,(map emit-param p))
                                      (access ,a)
                                      (config . ,c)
                                      (backend-only? #t)
                                      (serviceapi-only? #t)
                                      (disable (gqlqueriesfixtures componentfixtures apollobindings)))))
           (('ADDMETHOD 'SET v n a r p ('config . c) 'SERVICEAPIONLY)
            `(set ,v (,n "" ,r) (opts (params . ,(map emit-param p))
                                      (access ,a)
                                      (config . ,c)
                                      (backend-only? #t)
                                      (serviceapi-only? #t)
                                      (disable (gqlqueriesfixtures componentfixtures apollobindings)))))
           (('ADDMETHOD 'GET v n a r p ('config . c) 'APIONLY)
            `(get ,v (,(apiname->name n) "" ,r) (opts (params . ,(map emit-param p))
                                      (access ,a)
                                      (config . ,c)
                                      (api-only? #t)
                                      (disable (mockstores store-interfaces rdsstore playbackstores)))))
           (('ADDMETHOD 'SET v n a r p ('config . c) 'APIONLY)
            `(set ,v (,(apiname->name n) "" ,r) (opts (params . ,(map emit-param p))
                                      (access ,a)
                                      (config . ,c)
                                      (api-only? #t)
                                      (disable (mockstores store-interfaces rdsstore playbackstores)))))
           (('ADDMETHOD 'GET v n a r p ('config . c) 'CUSTOMONLY)
            `(get ,v (,(apiname->name n) "" ,r) (opts (params . ,(map emit-param p))
                                      (access ,a)
                                      (config . ,c)
                                      (service-only? #t)
                                      (disable (mockstores store-interfaces rdsstore playbackstores)))))
           (('ADDMETHOD 'SET v n a r p ('config . c) 'CUSTOMONLY)
            `(set ,v (,(apiname->name n) "" ,r) (opts (params . ,(map emit-param p))
                                      (access ,a)
                                      (config . ,c)
                                      (service-only? #t)
                                      (disable (mockstores store-interfaces rdsstore playbackstores)))))
           (('ADDMETHOD 'GET v n a r p ('config . c) 'DBONLY)
            `(get ,v (,n "" ,r) (opts (params . ,(map emit-param p))
                                      (access ,a)
                                      (config . ,c)
                                      (db-only? #t) 
                                      (backend-only? #t) 
                                      (disable (mappers resolvers typedefs service-interfaces gqlqueriesfixtures componentfixtures apollobindings)))))
           (('ADDMETHOD 'SET v n a r p ('config . c) 'DBONLY)
            `(set ,v (,n "" ,r) (opts (params . ,(map emit-param p))
                                      (access ,a)
                                      (config . ,c)
                                      (db-only? #t)
                                      (backend-only? #t)
                                      (disable (mappers resolvers typedefs service-interfaces gqlqueriesfixtures componentfixtures apollobindings)))))
           (('ADDMETHOD 'GET v n a r p ('config . c) 'BACKENDONLY)
            `(get ,v (,n "" ,r) (opts (params . ,(map emit-param p))
                                      (access ,a)
                                      (config . ,c)
                                      (backend-only? #t) 
                                      (disable (mappers resolvers typedefs service-interfaces gqlqueriesfixtures componentfixtures apollobindings)))))
           (('ADDMETHOD 'SET v n a r p ('config . c) 'BACKENDONLY)
            `(set ,v (,n "" ,r) (opts (params . ,(map emit-param p))
                                      (access ,a)
                                      (config . ,c)
                                      (backend-only? #t)
                                      (disable (mappers resolvers typedefs service-interfaces gqlqueriesfixtures componentfixtures apollobindings)))))
           (('ADDMETHOD 'GET v n a r p ('config . c))
            `(get ,v (,n "" ,r) (opts (params . ,(map emit-param p))
                                      (access ,a)
                                      (config . ,c))))
           (('ADDMETHOD 'SET v n a r p ('config . c))
            `(set ,v (,n "" ,r) (opts (params . ,(map emit-param p))
                                      (access ,a)
                                      (config . ,c))))
           (_ (error "emit-method failed for" method))))

  (define (emit-index idx)
    (match idx
           (`(UNIQUE ,m ,cols)
            `(index ,m (,cols) (opts (unique #t))))
           (`(DEFAULT ,m ,cols)
            `(index ,m (,cols) (opts (unique #f))))
           (`(DESTROY-UNIQUE ,m ,cols)
             `(index-destroy ,m (,cols) (opts (unique #t))))
           (`(DESTROY-DEFAULT ,m ,cols)
             `(index-destroy ,m (,cols) (opts (unique #f))))
           (_ (error "emit-index failed for" idx))))

  (define (emit-command cmd)
    (match cmd
           ((m ('SCALAR ('CREATE (('CTOR)))))
            `((scalar ,m)))
           ((?_Index ('INDEX ('CREATE (('CTOR . r) ...))))
            (map emit-index r))
           ((m ('TYPE ('CREATE (('CTOR) . fields))))
            `((type ,(cons m (map emit-type-field fields)))))
           ((m ('MODEL ('CREATE (('CTOR 'SERVICE p) . methods))))
            `((type ,(cons m '()) (opts (disable (frontend-interfaces typedefs service-interfaces))))
              (model (,p (type ,m) (methods . ,(map emit-method methods))
                         (opts (serviceapi-only? #t) (service-only? #t) (disable (migrations apollobindings apollocomponentfixtures store-interfaces rdsstore playbackstores)))))))
           ((m ('MODEL ('CREATE methods)))
            `((model (_ (type ,m) (methods . ,(map emit-method methods))))))
           ((m ('TYPE ('CREATE (('ADDFIELD . fss) ...))) ('MODEL ('CREATE methods)))
            (append (map (lambda (fs) `(type-extend ,m ,(emit-type-field `(ADDFIELD . ,fs)))) fss)
                    (map emit-method methods)))
           ((m ('TYPE ('CREATE (('ADDFIELD . fss) ...))))
            (map (lambda (fs) `(type-extend ,m ,(emit-type-field `(ADDFIELD . ,fs)))) fss))
           ((m ('TYPE ('CREATE (('CTOR) . fields))) ('MODEL ('CREATE (('CTOR 'PROXY p) . methods))))
            `((type ,(cons m (foldl (lambda (agg f) (append agg (emit-model-field m f))) '() fields)) (opts (disable (migrations))))
              (model (,p (type ,m) (methods . ,(map emit-method methods)) (opts (user #t) (disable (migrations)))))))
           ((m ('TYPE ('CREATE (('CTOR) . fields))) ('MODEL ('CREATE (('CTOR 'USER p) . methods))))
            `((type ,(cons m (append
                              '((id String (spec (force-numeric #t) (length 40) (primary-key #t) (fixed #t)))
                                (sub String (spec (fixed #t)))
                                (createdAt DateTime (spec (fixed #t)))
                                (updatedAt DateTime (spec (fixed #t)))
                                ;(user (Optional UserFields) (spec (disable (migrations rdsstore)) (metadata ((foreign-field sub sub user User fields)))))
                                )
                              (foldl (lambda (agg f) (append agg (emit-model-field m f))) '() fields))))
              (model (,p (type ,m) (methods . ,(map emit-method methods)) (opts (user #t))))))
           ((m ('TYPE ('CREATE (('CTOR) . fields))) ('MODEL ('CREATE (('CTOR p) . methods))))
            `((type ,(cons m (append
                              '((id String (spec (force-numeric #t) (primary-key #t) (fixed #t))))
                              (foldl (lambda (agg f) (append agg (emit-model-field m f))) '() fields))))
              (model (,p (type ,m) (methods . ,(map emit-method methods))) (opts))))
           (_ (error "emit-command failed for" cmd))))

  (define (emit-api cmds) (foldr append '() (map emit-command cmds)))

  ; ----------------------------------------------------------------------------------------------------------------------------

  (define (lremove l lst)
    (define (remove-once f l)
      (if (null? l) '()
        (if (f (car l)) (cdr l)
          (cons (car l) (remove-once f (cdr l))))))
    (foldr (lambda (i agg) 
             (remove-once (lambda (j) (eq? j i)) agg))
           lst l))

  (define (verify-props m props)
    (match props
           ((('ADDFIELD _ n . _) ...) 
            (let ((uniques (delete-duplicates n)))
              (if (= (length n) (length uniques)) '()
                (error (string-append "field " (->string (lremove uniques n)) " already exists on " (->string m))))))
           ((('ADDMETHOD _ _ n . _) ...)
            (let ((uniques (delete-duplicates n)))
              (if (= (length n) (length uniques)) '()
                (error (string-append "method " (->string (lremove uniques n)) " already exists on " (->string m))))))
           (_ props)))

  (define (verify-command cmd) 
    (match cmd
           ((m (_ ('CREATE (('CTOR . _) . props))) ...)
            (map (lambda (f) (verify-props m f)) props))
           ((m (_ ('CREATE (('ADDFIELD . _) . _))) ...)
            (error (string-append "cannot add fields to " (->string m) ", " (->string m) " has not been declared")))
           ((m (_ ('CREATE (('ADDMETHOD . _) . _))) ...)
            (error (string-append "cannot add methods to " (->string m) ", " (->string m) " has not been declared")))
           (x x)))
  (define (verify-schema schema)
    (let ((cmds (manifest->cmds (schema->manifest schema))))
      (remove null? (map verify-command cmds))
      ;(pp (remove null? (map verify-command cmds)))
      schema))
  (define (verify-schemas schemas) (map verify-schema schemas))

  ; ----------------------------------------------------------------------------------------------------------------------------

  (define (compile-manifest exprs) (group (foldr (lambda (i agg) (append (tf-expr i) agg)) '() exprs)))

  (define (make-manifest name exprs prev-exprs curr-exprs) (list name exprs prev-exprs curr-exprs))
  (define manifest->name car)
  (define manifest->exprs cadr)
  (define manifest->prev-exprs caddr)
  (define manifest->delta-exprs cadddr)
  (define (manifest->cmds m) (compile-manifest (manifest->exprs m)))
  (define (manifest->prev-cmds m) (compile-manifest (manifest->prev-exprs m)))
  (define (manifest->delta-cmds m) (compile-manifest (manifest->delta-exprs m)))

  (define (make-schema m) (list m))
  (define schema->manifest car)
  (define (schema->version s) (manifest->name (schema->manifest s)))
  (define (schema->api s) (emit-api (manifest->cmds (schema->manifest s))))
  (define (schema->prev-api s) (emit-api (manifest->prev-cmds (schema->manifest s))))
  (define (schema->delta-api s) (emit-api (manifest->delta-cmds (schema->manifest s))))
  (define (schema->version-number s) (version-name->number (schema->version s)))

  (define (generate-schemas merge-sub-versions? ledger)
    (define (make-empty-result) (cons '() '()))
    (define make-result cons)
    (define result->manifests car)
    (define result->exprs cdr)
    (let ((schemas
            (map make-schema 
                 (result->manifests
                   (foldr 
                     (lambda (v prev-result) 
                       (let ((prev-exprs (result->exprs prev-result))
                             (curr-exprs (version->exprs v)))
                         (let ((exprs (append prev-exprs curr-exprs)))
                           (make-result (append (result->manifests prev-result) 
                                                (list (make-manifest (version->name v) exprs prev-exprs curr-exprs)))
                                        exprs))))
                     (make-empty-result)
                     (reverse (inject-method-versions merge-sub-versions? ledger)))))))
      (verify-schemas schemas)
      schemas))
)

