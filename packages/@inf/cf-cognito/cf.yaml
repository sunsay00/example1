---
Parameters:
  Stage:
    Type: String
    AllowedValues: [dev, beta, production]
  Domain:
    Type: String
  InvitationEmailSubject:
    Type: String
  VerificationEmailSubject:
    Type: String
  FromEmail:
    Type: String

Conditions:
  IsProd: !Equals [!Sub '${Stage}', production]
  IsDev: !Equals [!Sub '${Stage}', dev]

Resources:

## [COGNITO] ##

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:

      # [ BEGIN WARNING ]
      UserPoolName: !Sub sc_pool_${Stage} # CHANGING THIS ATTRIBUTE WILL LOSE ALL USERS!!!
      Schema: # CHANGING THESE ATTRIBUTES WILL LOSE ALL USERS!!!
        - AttributeDataType: String
          Name: email
          Mutable: true
          Required: true
        - AttributeDataType: String
          Name: locale
          Mutable: true
          Required: true
        - AttributeDataType: String
          Name: preferred_username
          Mutable: true
          Required: true
        - AttributeDataType: String
          Name: role
          Mutable: true
          Required: false
        - AttributeDataType: String
          Name: uservar1
          Mutable: true
          Required: false
        - AttributeDataType: String
          Name: uservar2
          Mutable: true
          Required: false
        - AttributeDataType: String
          Name: uservar3
          Mutable: true
          Required: false
      # [ END WARNING ]

      AutoVerifiedAttributes:
        - email
      AliasAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      #DeviceConfiguration:
      #  DeviceOnlyRememberedOnUserPrompt: false
      EmailVerificationSubject: !Sub ${VerificationEmailSubject}
      #EmailConfiguration: # this can be enabled once a verified email has been created in ses
      #  SourceArn: !Sub arn:aws:ses:us-east-1:${AWS::AccountId}:identity/${FromEmail} # not supported in all regions, use us-east-1 by default
      AdminCreateUserConfig:
        InviteMessageTemplate:
          EmailSubject: !Sub ${InvitationEmailSubject}
      #LambdaConfig:
      #  PostConfirmation:
      #    Fn::ImportValue: !Sub postconfirm-${Stage}-LambdaFunctionArn

  MobileUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
        ClientName: !Sub sc_mobile_client_${Stage}
        RefreshTokenValidity: 30
        UserPoolId: !Ref UserPool
        ReadAttributes: ['address', 'email', 'email_verified', 'preferred_username', 'name', 'locale', 'phone_number', 'custom:role', 'custom:uservar1', 'custom:uservar2', 'custom:uservar3']
        WriteAttributes: ['address', 'email',                  'preferred_username', 'name', 'locale',                 'custom:role', 'custom:uservar1', 'custom:uservar2', 'custom:uservar3']

  WebUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
        ClientName: !Sub sc_web_client_${Stage}
        RefreshTokenValidity: 30
        UserPoolId: !Ref UserPool
        ReadAttributes: ['address', 'email', 'email_verified', 'preferred_username', 'name', 'locale', 'phone_number', 'custom:role', 'custom:uservar1', 'custom:uservar2', 'custom:uservar3']
        WriteAttributes: ['address', 'email',                  'preferred_username', 'name', 'locale',                 'custom:role', 'custom:uservar1', 'custom:uservar2', 'custom:uservar3']

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub sc_identity_pool_${Stage}
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref MobileUserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName
        - ClientId: !Ref WebUserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName
      #CognitoEvents:
        #SyncEvent: !Sub 'usersync-service-${Stage}-usersync'
        
  CognitoIdPoolAuthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action: sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
            ForAnyValue:StringLike:
              'cognito-identity.amazonaws.com:amr': authenticated
      Path: /
      Policies:
        - PolicyName: !Sub ${AWS::Region}-${AWS::StackName}-AuthorizedPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              Effect: Allow
              Action: ['mobileanalytics:PutEvents', 'cognito-sync:*', 'cognito-identity:*']
              Resource: '*'

  CognitoIdPoolUnauthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action: sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
            ForAnyValue:StringLike:
              'cognito-identity.amazonaws.com:amr': unauthenticated
      Path: /
      Policies:
        - PolicyName: !Sub ${AWS::Region}-${AWS::StackName}-UnauthorizedPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              Effect: Allow
              Action: ['mobileanalytics:PutEvents', 'cognito-sync:*']
              Resource: '*'

  CognitoIdPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoIdPoolAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoIdPoolUnauthorizedRole.Arn


## [GROUP ROLES] ##

  CognitoIdPoolAuthorizedAdminsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action: sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
            ForAnyValue:StringLike:
              'cognito-identity.amazonaws.com:amr': authenticated
      Path: /
      Policies:
        - PolicyName: !Sub ${AWS::Region}-${AWS::StackName}-AuthorizedAdminsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              Effect: Allow
              Action: ['mobileanalytics:PutEvents', 'cognito-sync:*', 'cognito-identity:*']
              Resource: '*'

  CognitoIdPoolAuthorizedDealershipRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action: sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
            ForAnyValue:StringLike:
              'cognito-identity.amazonaws.com:amr': authenticated
      Path: /
      Policies:
        - PolicyName: !Sub ${AWS::Region}-${AWS::StackName}-AuthorizedDealershipPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              Effect: Allow
              Action: ['mobileanalytics:PutEvents', 'cognito-sync:*', 'cognito-identity:*']
              Resource: '*'

  CognitoIdPoolAuthorizedSalesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action: sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
            ForAnyValue:StringLike:
              'cognito-identity.amazonaws.com:amr': authenticated
      Path: /
      Policies:
        - PolicyName: !Sub ${AWS::Region}-${AWS::StackName}-AuthorizedSalesPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              Effect: Allow
              Action: ['mobileanalytics:PutEvents', 'cognito-sync:*', 'cognito-identity:*']
              Resource: '*'

  CognitoAdminsUserPoolGroup:
    Type: "AWS::Cognito::UserPoolGroup"
    Properties:
      GroupName: admins
      RoleArn: !GetAtt CognitoIdPoolAuthorizedAdminsRole.Arn
      UserPoolId: !Ref UserPool

  CognitoDealershipUserPoolGroup:
    Type: "AWS::Cognito::UserPoolGroup"
    Properties:
      GroupName: dealership
      RoleArn: !GetAtt CognitoIdPoolAuthorizedDealershipRole.Arn
      UserPoolId: !Ref UserPool

  CognitoSalesUserPoolGroup:
    Type: "AWS::Cognito::UserPoolGroup"
    Properties:
      GroupName: sales
      RoleArn: !GetAtt CognitoIdPoolAuthorizedSalesRole.Arn
      UserPoolId: !Ref UserPool

  CognitoBuyerUserPoolGroup:
    Type: "AWS::Cognito::UserPoolGroup"
    Properties:
      GroupName: buyer
      RoleArn: !GetAtt CognitoIdPoolAuthorizedRole.Arn
      UserPoolId: !Ref UserPool

  # create this in the sls handler
  #ApiAccessPolicy:
  #  Type: AWS::IAM::Policy
  #  Properties:
  #    PolicyName: api-access
  #    PolicyDocument:
  #      Version: 2012-10-17
  #      Statement:
  #        - Effect: Allow
  #          Action: ['cognito-idp:AdminCreateUser', 'cognito-idp:AdminDeleteUser', 'cognito-idp:AdminConfirmSignUp', 'cognito-idp:AdminAddUserToGroup', 'cognito-idp:AdminDisableUser', 'cognito-idp:AdminEnableUser','cognito-idp:ListUsers', 'cognito-idp:AdminUpdateUserAttributes', 'cognito-idp:AdminGetUser']
  #          Resource: 
  #            - Fn::Join:
  #                - ""
  #                - - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/
  #                  - !Ref UserPool
  #    Roles: [!Sub 'api-${Stage}-${AWS::Region}-lambdaRole']

  #PostConfirmApiAccessPolicy:
  #  Type: AWS::IAM::Policy
  #  Properties:
  #    PolicyName: sc-post-confirm-api-access
  #    PolicyDocument:
  #      Version: 2012-10-17
  #      Statement:
  #        - Effect: Allow
  #          Action: ['lambda:InvokeFunction']
  #          Resource: 
  #            - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:api-${Stage}-api
  #        - Effect: Allow
  #          Action: ['cognito-idp:AdminAddUserToGroup']
  #          Resource: 
  #            - Fn::Join:
  #                - ""
  #                - - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/
  #                  - !Ref UserPool
  #    Roles: [!Sub 'postconfirm-${Stage}-${AWS::Region}-lambdaRole']

  DevsGroup:
    Condition:  IsDev
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Sub ${AWS::Region}-devs
      Policies:
        - PolicyName: sc-devs-access-secrets
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ['cognito-idp:AdminCreateUser', 'cognito-idp:AdminDeleteUser', 'cognito-idp:AdminConfirmSignUp', 'cognito-idp:AdminAddUserToGroup', 'cognito-idp:AdminDisableUser', 'cognito-idp:AdminEnableUser','cognito-idp:ListUsers', 'cognito-idp:AdminUpdateUserAttributes', 'cognito-idp:AdminGetUser']
                Resource:
                  - Fn::Join:
                      - ""
                      - - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/
                        - !Ref UserPool
              - Effect: Allow
                Action: ['s3:GetObject', 's3:GetObjectAcl', 's3:ListBucket']
                Resource:
                  - !Sub arn:aws:s3:::config-${AWS::Region}.${Domain}
                  - !Sub arn:aws:s3:::config-${AWS::Region}.${Domain}/*

Outputs:
  CognitoIdentityPoolId:
    Value: !Ref IdentityPool
  UserPoolId:
    Value: !Ref UserPool
  WebUserPoolClientId:
    Value: !Ref WebUserPoolClient
  MobileUserPoolClientId:
    Value: !Ref MobileUserPoolClient

