#!/usr/bin/env node
'use strict';
const { spawn } = require('child_process');
const colors = require('./colors');

const args = ['react-native', 'log-android'];

const lg = spawn('yarn', args);

lg.stdout.on('data', data => {
  const str = data.toString().trim();

  const matches = /'\[(ERROR|WARN|LOG|DEBUG)\].*$/gms.exec(str);
  if (!matches) {
    const m = /] (.) .*ReactNativeJS ▶︎ (.*)/gms.exec(str);
    if (!m) {
      const m = /] (.) .*ReactNative ▶︎ (.*)/gms.exec(str);
      if (!m) {
        console.log(str.trim());
      } else {
        const [_, type, msg] = m;
        if (type == 'I') {
          //console.log(`${'[MSG]'.grey} ${msg.gray}`);
        } else if (type == 'W') {
          console.log(`${'[MSG]'.yellow} ${msg.gray}`);
        } else if (type == 'E') {
          console.log(`${'[MSG]'.red} ${msg.gray}`);
        } else if (type == 'D') {
          //console.log(`${'[MSG]'.blue} ${msg.gray}`);
        } else {
          console.log(`${MSG}: ${msg.gray}`);
        }
      }
    } else {
      const [_, type, msg] = m;
      if (type == 'I') {
        console.log(`${'[INFO]'.grey} ${msg.gray}`);
      } else if (type == 'W') {
        console.log(`${'[WARN]'.yellow} ${msg.gray}`);
      } else if (type == 'E') {
        console.log(`${'[ERROR]'.red} ${msg.gray}`);
      } else if (type == 'D') {
        console.log(`${'[DEBUG]'.blue} ${msg.gray}`);
      } else {
        console.log(`${type.bold}: ${msg.gray}`);
      }
    }
  } else {
    const re = /'((?:[^'\\]|\\.)*)'/gs;
    const params = [];
    let m = undefined;
    do {
      m = re.exec(matches[0]);
      if (m) params.push(m[1])
    } while (m);

    const [type, ...rest] = params;
    const last = rest.pop().grey;
    if (type == '[WARN]') console.log.apply(this, [type.yellow, ...rest, last]);
    else if (type == '[ERROR]') console.log.apply(this, [type.red, ...rest, last]);
    else if (type == '[LOG]' || i == '[INFO]') console.log.apply(this, [type.grey, ...rest, last]);
    else if (type == '[DEBUG]') console.log.apply(this, [type.blue, ...rest, last]);
    else console.log.apply(this, [type.bold, ...rest, last]);
  }
});

lg.stderr.on('data', data => {
  console.log(`stderr: ${data}`);
});

lg.on('close', code => {
  console.log(`child process exited with code ${code}`);
});
